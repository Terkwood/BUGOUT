[1mdiff --git a/changelog/build.gradle b/changelog/build.gradle[m
[1mindex 142acfd..cddd51c 100644[m
[1m--- a/changelog/build.gradle[m
[1m+++ b/changelog/build.gradle[m
[36m@@ -5,7 +5,7 @@[m [mplugins {[m
 [m
 group 'terkwood.farm'[m
 [m
[31m-version '0.2.4'[m
[32m+[m[32mversion '0.2.5'[m
 [m
 apply plugin: 'kotlin'[m
 apply plugin: 'application'[m
[1mdiff --git a/changelog/src/main/kotlin/Aggregator.kt b/changelog/src/main/kotlin/Aggregator.kt[m
[1mindex d2b98ea..79d0754 100644[m
[1m--- a/changelog/src/main/kotlin/Aggregator.kt[m
[1m+++ b/changelog/src/main/kotlin/Aggregator.kt[m
[36m@@ -62,7 +62,7 @@[m [mclass Aggregator(private val brokers: String) {[m
                     Serdes.Integer()))[m
 [m
 [m
[31m-        val gameStates: KTable<UUID, GameState> =[m
[32m+[m[32m        val gameStatesIn: KTable<UUID, GameState> =[m
             // insight: // https://stackoverflow.com/questions/51966396/wrong-serializers-used-on-aggregate[m
             pair[m
                 .groupByKey()[m
[36m@@ -90,7 +90,7 @@[m [mclass Aggregator(private val brokers: String) {[m
                         )[m
                 )[m
 [m
[31m-        gameStates[m
[32m+[m[32m        gameStatesIn[m
             .toStream()[m
             .map { k, v ->[m
                 println("\uD83D\uDCBE          ${k?.toString()?.take(8)} AGGRGATE Turn ${v.turn} PlayerUp ${v.playerUp}")[m
[1mdiff --git a/changelog/src/test/kotlin/GameTest.kt b/changelog/src/test/kotlin/GameTest.kt[m
[1mindex bab8a95..40b98dd 100644[m
[1m--- a/changelog/src/test/kotlin/GameTest.kt[m
[1m+++ b/changelog/src/test/kotlin/GameTest.kt[m
[36m@@ -13,11 +13,11 @@[m [mimport java.util.*[m
 [m
 [m
 @TestInstance(TestInstance.Lifecycle.PER_CLASS)[m
[31m-class BasicGameTest {[m
[32m+[m[32mclass GameTest {[m
     private val testDriver: TopologyTestDriver = setup()[m
 [m
     @Test[m
[31m-    fun gameTest() {[m
[32m+[m[32m    fun basicTest() {[m
 [m
         val gameId = UUID.randomUUID()[m
         val replyTo = UUID.randomUUID()[m
[36m@@ -109,7 +109,11 @@[m [mclass BasicGameTest {[m
 [m
         OutputVerifier.compareKeyValue(secondOutputRecord, actualSecond.gameId, expectedSecond)[m
 [m
[31m-[m
[32m+[m[32m        testDriver.readOutput([m
[32m+[m[32m            Topics.GAME_STATES_CHANGELOG,[m
[32m+[m[32m            UUIDDeserializer(),[m
[32m+[m[32m            StringDeserializer()[m
[32m+[m[32m        )[m
     }[m
 [m
     @AfterAll[m
